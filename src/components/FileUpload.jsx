import React, { useState } from 'react';
import * as XLSX from 'xlsx';
import { saveStudents } from '../service/db';
import '../styles/upload.css';

const FileUpload = ({ onDone }) => {
    const [isLoading, setIsLoading] = useState(false);
    const [notification, setNotification] = useState(null);

    const handleFile = async (e) => {
        const file = e.target.files[0];
        if (!file) {
            setNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞',
                content: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel'
            });
            return;
        }

        setIsLoading(true);
        setNotification(null);

        try {
            const data = await file.arrayBuffer();
            const workbook = XLSX.read(data);
            const allStudents = [];

            workbook.SheetNames.forEach((sheetName) => {
                const worksheet = workbook.Sheets[sheetName];
                let row = 8;
                const students = [];

                while (true) {
                    const cellAddress = `D${row}`;
                    const cell = worksheet[cellAddress];

                    if (!cell || !cell.v || String(cell.v).trim() === '') {
                        break;
                    }

                    students.push({
                        groupName: sheetName,
                        fullName: String(cell.v).trim(),
                    });

                    row++;
                }

                if (students.length > 0) {
                    allStudents.push(...students);
                }
            });

            if (allStudents.length === 0) {
                setNotification({
                    type: 'error',
                    title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                    content: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö'
                });
                return;
            }

            await saveStudents(allStudents);

            setNotification({
                type: 'success',
                title: '–£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞!',
                content: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allStudents.length} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ ${workbook.SheetNames.length} –≥—Ä—É–ø–ø`
            });

            setTimeout(() => {
                setNotification(null);
                onDone?.(allStudents);
                window.location.reload();
            }, 4000);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
            setNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                content: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞'
            });
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="file-upload-wrapper">
            <h3>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è</h3>
            <p>–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—Å—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø, —Å–ø–∏—Å–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —è—á–µ–π–∫–∏ D8</p>

            <input
                id="fileInput"
                type="file"
                className="file-upload-input"
                accept=".xlsx, .xls"
                onChange={handleFile}
                disabled={isLoading}
            />

            <label
                htmlFor="fileInput"
                className={`file-upload-label ${isLoading ? 'file-selected' : ''}`}
            >
                {isLoading ? (
                    <>
                        <span className="loading-spinner" />
                        <span>–û–±—Ä–∞–±–æ—Ç–∫–∞...</span>
                    </>
                ) : (
                    <>
                        <span className="file-icon">üìÅ</span>
                        <span>–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</span>
                    </>
                )}
            </label>

            {notification && (
                <div className={`notification ${notification.type}`}>
                    <div className="notification-icon">
                        {notification.type === 'success' ? '‚úì' : '‚ö†'}
                    </div>
                    <div className="notification-content">
                        <h4>{notification.title}</h4>
                        <p>{notification.content}</p>
                    </div>
                    <button
                        className="notification-close"
                        onClick={() => setNotification(null)}
                        aria-label="–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                    >
                        √ó
                    </button>
                </div>
            )}
        </div>
    );
};

export default FileUpload;